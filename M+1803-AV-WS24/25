{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d5f5e9f6",
   "metadata": {
    "papermill": {
     "duration": 0.004422,
     "end_time": "2025-02-19T17:32:48.038223",
     "exception": false,
     "start_time": "2025-02-19T17:32:48.033801",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "https://www.kaggle.com/code/avhsog4444/m-i803-avhsogws24-25/notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9220c1fa",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-02-19T17:32:48.047677Z",
     "iopub.status.busy": "2025-02-19T17:32:48.047307Z",
     "iopub.status.idle": "2025-02-19T17:33:02.437859Z",
     "shell.execute_reply": "2025-02-19T17:33:02.437065Z"
    },
    "papermill": {
     "duration": 14.397333,
     "end_time": "2025-02-19T17:33:02.439751",
     "exception": false,
     "start_time": "2025-02-19T17:32:48.042418",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import cv2\n",
    "import numpy as np\n",
    "from tensorflow.keras.utils import img_to_array\n",
    "from PIL import Image\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.applications import EfficientNetB0\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import Input, Dense, GlobalAveragePooling2D, Dropout\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import seaborn as sns\n",
    "import imageio.v3 as imageio"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8bde6cd",
   "metadata": {
    "papermill": {
     "duration": 0.003724,
     "end_time": "2025-02-19T17:33:02.447828",
     "exception": false,
     "start_time": "2025-02-19T17:33:02.444104",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Image Loading and Preprocessing\n",
    "**Image Loading (cv2.imread):**\n",
    "  - Reads the image in grayscale mode.\n",
    "  - Grayscale reduces data complexity while preserving key structural details (e.g., edges and contrasts).\n",
    "\n",
    "**Adaptive Thresholding:**\n",
    "  ```\n",
    "  image = cv2.adaptiveThreshold(\n",
    "      image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 145, 2\n",
    "  )\n",
    "  ```\n",
    "Maximum value (255) Sets the binary value for pixels above the threshold.\n",
    "\n",
    "**Method (ADAPTIVE_THRESH_GAUSSIAN_C)**\n",
    "Uses a Gaussian-weighted sum for local thresholding.\n",
    "\n",
    "**Block Size (145)**\n",
    "Defines the neighborhood size for threshold calculation. A larger block size captures more global trends; a smaller one is more local.\n",
    "\n",
    "**Constant (2)**\n",
    "Subtracts from the computed mean. Tweaking this value adjusts how aggressive the thresholding is.\n",
    "\n",
    "Variations\n",
    "Changing block size or constant can help with images having different lighting or background noise.\n",
    "\n",
    "## Morphological Closing\n",
    "```\n",
    "close_kernel = np.ones((3, 3), np.uint8)\n",
    "image = cv2.morphologyEx(image, cv2.MORPH_CLOSE, close_kernel)\n",
    "```\n",
    "Uses a 3x3 kernel to fill small holes or gaps in the binary image.\n",
    "A larger kernel (e.g., 5x5) might fill larger gaps but could also over-smooth details.\n",
    "\n",
    "## Dilation\n",
    "\n",
    "```\n",
    "dilate_kernel = np.ones((2, 2), np.uint8)\n",
    "image = cv2.dilate(image, dilate_kernel, iterations=2)\n",
    "```\n",
    "Expands the white regions (characters) to better connect broken parts.\n",
    "Iterations (2): Controls how many times the dilation is applied. More iterations increase the expansion.\n",
    "Changing the kernel size or number of iterations can fine-tune the connection of character components.\n",
    "\n",
    "## Gaussian Blur\n",
    "\n",
    "```\n",
    "image = cv2.GaussianBlur(image, (5, 5), 0)\n",
    "```\n",
    "\n",
    "Smooths the image by averaging pixel values using a Gaussian function.\n",
    "## Kernel Size (5x5)\n",
    "Determines the level of smoothing.\n",
    "\n",
    "Variation: Adjust the kernel size or sigma for different levels of noise reduction.\n",
    "\n",
    "## Image Inversion\n",
    "\n",
    "```\n",
    "image = cv2.bitwise_not(image)\n",
    "```\n",
    "Inverts the binary image so that characters become white on a black background (or vice versa), which can be more suitable for some segmentation/classification pipelines.\n",
    "\n",
    "Alternative approaches were considered, such as splitting the image dynamically by calculating the image dimensions and dividing the width into equal parts:\n",
    "```\n",
    "n_chars = 5\n",
    "height, width = image.shape\n",
    "start_row = int(height * 0.5)  # Intended to use a central band of the image\n",
    "end_row = int(height * 0.5)\n",
    "char_width = width // n_chars\n",
    "char_segments = [ image[start_row:end_row, i*char_width:(i+1)*char_width] for i in range(n_chars) ]\n",
    "```\n",
    "\n",
    "However, this approach did not yield the expected segmentation because it did not correctly define the vertical bounds. More tweaking is needed here.\n",
    "\n",
    "Other variations with slightly shifted boundaries or overlapping segments were also considered (as seen in the commented-out code). These adjustments help refine the segmentation when characters are spaced unevenly or if there is a risk of cutting off parts of characters.\n",
    "\n",
    "# Automated Segmentation Possibilities\n",
    "While the code currently uses fixed segmentation coordinates based on empirical observations, an automated segmentation approach could improve robustness. Some possibilities include:\n",
    "\n",
    "## Adaptive Pixel Clustering\n",
    "Techniques such as connected-components analysis or contour detection can automatically group pixels into regions corresponding to individual characters. This method would adapt to variations in character positioning and size.\n",
    "\n",
    "## Dynamic Boundary Calculation\n",
    "Instead of relying on hard-coded indices, boundaries could be calculated based on the distribution of pixel intensities or edges. For example, using projection profiles or analyzing horizontal/vertical pixel density can help determine where characters start and end.\n",
    "\n",
    "## Deep Learning Based Segmentation\n",
    "More advanced methods involve training a segmentation network (e.g., U-Net) to directly segment out characters from captcha images. This could be especially useful when captcha images vary widely in layout and noise patterns.\n",
    "\n",
    "## Label Extraction and Data Preparation\n",
    "After segmentation, the code extracts the label for each character from the filename (using slicing such as filename[-9:-4]). Each valid segment is converted into an array using img_to_array, and both the image data (X) and labels (y) are appended. The images are later normalized to the range [0, 1]. Labels are encoded using LabelEncoder followed by one-hot encoding with OneHotEncoder.\n",
    "\n",
    "Finally, the dataset is split into training and testing sets using train_test_split with:\n",
    "\n",
    "- `test_size=0.4`: 40% of the data is reserved for testing.\n",
    "- `random_state=420`: Ensures reproducibility.\n",
    "- `stratify=y_onehot`: Maintains the same class distribution in both training and testing sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d74eb476",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-19T17:33:02.457215Z",
     "iopub.status.busy": "2025-02-19T17:33:02.456671Z",
     "iopub.status.idle": "2025-02-19T17:33:10.025890Z",
     "shell.execute_reply": "2025-02-19T17:33:10.024925Z"
    },
    "papermill": {
     "duration": 7.575591,
     "end_time": "2025-02-19T17:33:10.027381",
     "exception": false,
     "start_time": "2025-02-19T17:33:02.451790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed 5350 segments.\n",
      "Shape of X: (5350, 40, 20, 1)\n",
      "Shape of y: (5350,)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import os\n",
    "import cv2\n",
    "import numpy as np\n",
    "from tensorflow.keras.utils import img_to_array\n",
    "from PIL import Image\n",
    "import imageio.v3 as imageio\n",
    "\n",
    "# Initialize data arrays\n",
    "X = []\n",
    "y = []\n",
    "\n",
    "# Kernel definitions for morphological operations\n",
    "# I changed initial measure of close kernel from 5x5 to 3x3\n",
    "close_kernel = np.ones((3, 3), np.uint8)\n",
    "dilate_kernel = np.ones((2, 2), np.uint8)\n",
    "\n",
    "# Process images from directory\n",
    "for dirname, _, filenames in os.walk('/kaggle/input/data84u8rhfnd921ndksao02318uhen'):\n",
    "    for filename in filenames:\n",
    "        if filename.endswith(('.png', '.jpg', '.jpeg')):  # Process only image files\n",
    "            path = os.path.join(dirname, filename)\n",
    "            image = cv2.imread(path, cv2.IMREAD_GRAYSCALE)\n",
    "            \n",
    "            # Read image using imageio in grayscale mode.\n",
    "            # image = imageio.imread(path, mode='F')\n",
    "            # # Convert image to uint8 if necessary (imageio may return floats in [0,1]).\n",
    "            # if image.dtype != np.uint8:\n",
    "            #     image = (image * 255).astype(np.uint8)\n",
    "            \n",
    "            if image is None:\n",
    "                continue  # Skip if the image couldn't be loaded\n",
    "            \n",
    "            # Adaptive Threshold\n",
    "            image = cv2.adaptiveThreshold(\n",
    "                image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 145, 2\n",
    "            )\n",
    "            \n",
    "            # Morphological Closing\n",
    "            image = cv2.morphologyEx(image, cv2.MORPH_CLOSE, close_kernel)\n",
    "            \n",
    "            # Dilation\n",
    "            image = cv2.dilate(image, dilate_kernel, iterations=2) # helpful to increase\n",
    "            \n",
    "            # Gaussian Blur\n",
    "            image = cv2.GaussianBlur(image, (5, 5), 0)\n",
    "            # TODO trying inversion here\n",
    "            image = cv2.bitwise_not(image)\n",
    "            # Ensure the segmented area indices are valid\n",
    "            # Split image into character segments dynamically if necessary\n",
    "            try:\n",
    "                # Segmentation coordinates - these should adapt dynamically\n",
    "                # char_segments = [\n",
    "                #     image[10:50, 30:50],\n",
    "                #     image[10:50, 50:70],\n",
    "                #     image[10:50, 70:90],\n",
    "                #     image[10:50, 90:110],\n",
    "                #     image[10:50, 110:130]\n",
    "                # ]\n",
    "                char_segments = [\n",
    "                    image[8:48, 30:50],\n",
    "                    image[8:48, 50:70],\n",
    "                    image[8:48, 70:90],\n",
    "                    image[8:48, 90:110],\n",
    "                    image[8:48, 110:130]\n",
    "                ] \n",
    "                \n",
    "                # Attempt at dynamic settings\n",
    "                # n_chars = 5\n",
    "                # height, width = image.shape\n",
    "                # start_row = int(height * 0.5)  # Example: use 30%-70% of the image height\n",
    "                # end_row = int(height * 0.5)\n",
    "                # char_width = width // n_chars  # Equally split the image width into 5 parts\n",
    "                # char_segments = [ image[start_row:end_row, i*char_width:(i+1)*char_width] for i in range(n_chars) ]\n",
    "                \n",
    "                # char_segments = [\n",
    "                #     image[10:50, 30:55],\n",
    "                #     image[10:50, 50:75],\n",
    "                #     image[10:50, 70:95],\n",
    "                #     image[10:50, 90:115],\n",
    "                #     image[10:50, 110:135]\n",
    "                # ]\n",
    "                # char_segments = [\n",
    "                #     image[10:50, 30:50],\n",
    "                #     image[10:50, 52:72],\n",
    "                #     image[10:50, 74:94],\n",
    "                #     image[10:50, 96:116],\n",
    "                #     image[10:50, 118:138]\n",
    "                # ]\n",
    "                \n",
    "                # Only process if we have valid segments and they align with the expected number of categories\n",
    "                if len(char_segments) == len(filename[-9:-4]):  # Ensure matching number\n",
    "                    for i, segment in enumerate(char_segments):\n",
    "                        # Ensure segmentation data isn't empty\n",
    "                        if segment.size > 0:\n",
    "                            X.append(img_to_array(Image.fromarray(segment)))\n",
    "                            y.append(filename[-9:-4][i])  # Extract corresponding label\n",
    "                else:\n",
    "                    print(f\"Skipping {filename} due to mismatch in expected characters.\")\n",
    "            except IndexError:\n",
    "                print(f\"Skipping {filename} due to invalid segmentation indexing.\")\n",
    "plt.imshow(image) \n",
    "plt.axis('off') \n",
    "plt.title(\"Image transformation\") \n",
    "plt.show()\n",
    "\n",
    "# Convert X and y to NumPy arrays\n",
    "X = np.array(X, dtype=np.float32) / 255.0  # Normalize images to [0, 1]\n",
    "y = np.array(y)\n",
    "\n",
    "# Label encoding (numerical transformation of classes/targets)\n",
    "from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n",
    "\n",
    "label_encoder = LabelEncoder()\n",
    "y_encoded = label_encoder.fit_transform(y)\n",
    "\n",
    "# One-hot encode the labels\n",
    "onehot_encoder = OneHotEncoder(sparse_output=False)\n",
    "y_onehot = onehot_encoder.fit_transform(y_encoded.reshape(-1, 1))\n",
    "\n",
    "# Split the dataset into training and testing sets\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y_onehot, test_size=0.4, random_state=69, stratify=y_onehot\n",
    ")\n",
    "\n",
    "# Print dataset shapes\n",
    "print(f\"Processed {len(X)} segments.\")\n",
    "print(f\"Shape of X: {X.shape}\")\n",
    "print(f\"Shape of y: {y.shape}\")\n",
    "\n",
    "plt.imshow(image) \n",
    "plt.axis('off') \n",
    "plt.title(\"Image transformation\") \n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c098ae7b",
   "metadata": {
    "papermill": {
     "duration": 0.006013,
     "end_time": "2025-02-19T17:33:10.040063",
     "exception": false,
     "start_time": "2025-02-19T17:33:10.034050",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Histogram of Oriented Gradients and Feature Extraction\n",
    "## An alternative Approach: HOG-Based Character Segmentation and Classification\n",
    "\n",
    "This code snippet presents an alternative, untested approach to the dense model for OCR on captchas. Rather than feeding flattened pixel values into a deep neural network, this pipeline leverages classical computer vision and machine learning techniques to segment and classify individual characters.\n",
    "\n",
    "## Overview\n",
    "\n",
    "1. **Preprocessing:**  \n",
    "   - The image is loaded using Imageio and processed with adaptive thresholding, morphological closing, dilation, and Gaussian blur using OpenCV.  \n",
    "   - These steps normalize the input and remove noise, enhancing the contrast between the characters and the background.\n",
    "\n",
    "2. **Segmentation:**  \n",
    "   - Connected-components analysis is used to detect candidate regions that likely contain characters.  \n",
    "   - These candidate regions are filtered by area and sorted left-to-right to preserve the natural reading order.\n",
    "\n",
    "3. **Feature Extraction & Classification:**  \n",
    "   - For each segmented region, the region is resized to a standard size (32×32), and Histogram of Oriented Gradients (HOG) features are extracted using skimage.  \n",
    "   - A pre-trained classifier (for example, an SVM loaded from a pickle file) is then used to predict the character in each region.\n",
    "\n",
    "## Advantages and Considerations\n",
    "\n",
    "- **Modularity:**  \n",
    "  This approach decouples the segmentation and classification tasks. The segmentation is handled with classic connected-components, while classification is done via HOG features. This allows us to tweak or replace parts of the pipeline independently.\n",
    "\n",
    "- **Interpretability:**  \n",
    "  With HOG features and a conventional classifier, the feature extraction process is more interpretable compared to the learned features in a dense model.\n",
    "\n",
    "- **Potential Drawbacks:**  \n",
    "  As an untested approach, it may require significant parameter tuning. For example, the thresholds in the adaptive thresholding, the kernel sizes in the morphological operations, and the HOG extraction parameters all need to be carefully adjusted for the specific noise and variability in our captcha images.\n",
    "\n",
    "- **Comparison with Dense Models:**  \n",
    "  Dense models learn end-to-end mappings from pixels to labels, often excelling with large datasets and complex patterns. In contrast, this classical approach might perform well in settings with limited data or when model interpretability is paramount. However, it may struggle with highly variable captcha designs or subtle features that a deep model could learn automatically.\n",
    "\n",
    "This alternative pipeline offers a viable route using traditional image processing and machine learning methods. It serves as an exploratory approach to compare against dense neural networks, particularly in scenarios where interpretability and modularity are desired. Given its untested nature, thorough experimentation and parameter tuning will be crucial to achieving competitive performance on our captcha dataset.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4edb54d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-19T17:33:10.053464Z",
     "iopub.status.busy": "2025-02-19T17:33:10.053130Z",
     "iopub.status.idle": "2025-02-19T17:33:10.057981Z",
     "shell.execute_reply": "2025-02-19T17:33:10.057235Z"
    },
    "papermill": {
     "duration": 0.013287,
     "end_time": "2025-02-19T17:33:10.059415",
     "exception": false,
     "start_time": "2025-02-19T17:33:10.046128",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import os\n",
    "# import cv2\n",
    "# import numpy as np\n",
    "# import matplotlib.pyplot as plt\n",
    "# from skimage.feature import hog\n",
    "# from tensorflow.keras.utils import img_to_array\n",
    "# from PIL import Image\n",
    "# from tqdm import tqdm\n",
    "\n",
    "\n",
    "# def preprocess_image(image):\n",
    "#     # Adaptive thresholding\n",
    "#     thresh = cv2.adaptiveThreshold(image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, \n",
    "#                                    cv2.THRESH_BINARY, 11, 2)\n",
    "#     # Morphological closing with a 3x3 kernel\n",
    "#     kernel = np.ones((3, 3), np.uint8)\n",
    "#     closed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)\n",
    "#     # Dilation to connect components\n",
    "#     dilated = cv2.dilate(closed, kernel, iterations=1)\n",
    "#     # Gaussian blur to smooth noise\n",
    "#     blurred = cv2.GaussianBlur(dilated, (5, 5), 0)\n",
    "#     return blurred\n",
    "\n",
    "\n",
    "# def segment_characters_fixed(image):\n",
    "#     # Example fixed segmentation based on empirical observations.\n",
    "#     # Adjust the coordinates based on our captcha layout.\n",
    "#     char_segments = [\n",
    "#             image[8:48, 30:50],\n",
    "#             image[8:48, 50:70],\n",
    "#             image[8:48, 70:90],\n",
    "#             image[8:48, 90:110],\n",
    "#             image[8:48, 110:130]\n",
    "#         ] \n",
    "#     return char_segments\n",
    "\n",
    "# def extract_hog_features(crop, resize_dim=(32, 32)):\n",
    "#     # Resize crop to a standard size\n",
    "#     crop_resized = cv2.resize(crop, resize_dim)\n",
    "#     # Extract HOG features\n",
    "#     features = hog(crop_resized, orientations=9, pixels_per_cell=(8, 8),\n",
    "#                    cells_per_block=(2, 2), visualize=False)\n",
    "#     return features\n",
    "\n",
    "# # Initialize arrays for features and labels\n",
    "# X_features = []\n",
    "# y_labels = []\n",
    "\n",
    "# # Path to the directory containing captcha images\n",
    "# dataset_dir = '/kaggle/input/data84u8rhfnd921ndksao02318uhen'\n",
    "\n",
    "# # Process each captcha image in the dataset\n",
    "# for root, dirs, files in os.walk(dataset_dir):\n",
    "#     for filename in tqdm(files, desc=\"Processing Captchas\"):\n",
    "#         if filename.lower().endswith(('.png')):\n",
    "#             path = os.path.join(root, filename)\n",
    "#             # Load image in grayscale using cv2\n",
    "#             image = cv2.imread(path, cv2.IMREAD_GRAYSCALE)\n",
    "#             if image is None:\n",
    "#                 continue  # Skip if the image couldn't be loaded\n",
    "            \n",
    "#             # Preprocess the image\n",
    "#             processed_image = preprocess_image(image)\n",
    "            \n",
    "#             # Segment characters (using a fixed method; we may substitute with a dynamic approach)\n",
    "#             char_segments = segment_characters_fixed(processed_image)\n",
    "            \n",
    "#             # Assume the filename encodes the correct character sequence, e.g., \"A1B2C.png\"\n",
    "#             expected_labels = os.path.splitext(filename)[0]\n",
    "            \n",
    "#             # Proceed only if the number of segments matches the expected label length\n",
    "#             if len(char_segments) == len(expected_labels):\n",
    "#                 for i, segment in enumerate(char_segments):\n",
    "#                     # Skip empty segments\n",
    "#                     if segment.size == 0:\n",
    "#                         continue\n",
    "#                     # Extract HOG features for this character\n",
    "#                     features = extract_hog_features(segment)\n",
    "#                     X_features.append(features)\n",
    "#                     # Append the corresponding label (character)\n",
    "#                     y_labels.append(expected_labels[i])\n",
    "#             else:\n",
    "#                 print(f\"Skipping {filename} due to mismatch in expected characters.\")\n",
    "\n",
    "# # Convert to NumPy arrays for classifier training\n",
    "# X_features = np.array(X_features)\n",
    "# y_labels = np.array(y_labels)\n",
    "\n",
    "# print(\"X_features shape:\", X_features.shape)\n",
    "# print(\"y_labels shape:\", y_labels.shape)\n",
    "\n",
    "# # -# Convert X and y to NumPy arrays for classifier training\n",
    "# # -X = np.array(X)\n",
    "# # -y = np.array(y)\n",
    "# # Convert X_features and y_labels to NumPy arrays for classifier training\n",
    "# X = np.array(X_features)\n",
    "# y = np.array(y_labels)\n",
    "\n",
    "# # SVM\n",
    "\n",
    "# from sklearn.svm import SVC\n",
    "# from sklearn.model_selection import train_test_split\n",
    "\n",
    "# # X_features: array of HOG features, y_labels: corresponding labels\n",
    "# X_train, X_test, y_train, y_test = train_test_split(X_features, y_labels, test_size=0.2, random_state=42)\n",
    "   \n",
    "# classifier = SVC(kernel='linear', probability=True)\n",
    "# classifier.fit(X_train, y_train)\n",
    "# print(X_train)\n",
    "\n",
    "# # export to classifier-retrievable file\n",
    "# # import pickle\n",
    "\n",
    "# # # Save the classifier to a file named 'classifier.pkl'\n",
    "# # with open('classifier.pkl', 'wb') as f:\n",
    "# #     pickle.dump(classifier, f)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51dd2a04",
   "metadata": {
    "papermill": {
     "duration": 0.00574,
     "end_time": "2025-02-19T17:33:10.071526",
     "exception": false,
     "start_time": "2025-02-19T17:33:10.065786",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Normalizing Feature Data\n",
    "```\n",
    "X = X.astype(np.float32) / 255.0\n",
    "```\n",
    "## Significance\n",
    "This line scales pixel values from the range [0, 255] down to [0, 1].\n",
    "Normalizing features can help improve training stability, speed up convergence, and ensure gradient updates are more consistent.\n",
    "# Label Encoding & One-Hot Encoding\n",
    "```\n",
    "label_encoder = LabelEncoder()\n",
    "y_le = label_encoder.fit_transform(y)\n",
    "onehot_encoder = OneHotEncoder(sparse_output=False)\n",
    "y_ohe = onehot_encoder.fit_transform(y_le.reshape(-1, 1))\n",
    "```\n",
    "## Significance\n",
    "`LabelEncoder` transforms categorical labels (e.g., strings like \"cat\", \"dog\") into integer codes (0, 1, 2, etc.).\n",
    "`OneHotEncoder` then converts these integer labels into one-hot vectors. For instance, if we have 3 classes, label \"1\" becomes [0, 1, 0].\n",
    "One-hot encoding is crucial for multi-class classification in neural networks, where the final layer typically has softmax activation.\n",
    "\n",
    "# Splitting the Dataset (train_test_split)\n",
    "```\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y_ohe, test_size=0.4, random_state=69, stratify=y_le\n",
    ")\n",
    "```\n",
    "## Significance\n",
    "- `test_size`: Reserves a certain percentage of the data for testing. This is a relatively large test set, which can help get a more robust estimate of generalization but leaves less data for training.\n",
    "- `random_state`: Ensures reproducible splits. The same seed yields the same shuffle each time.\n",
    "- `stratify=y_le`: Maintains class distribution in both train and test sets. This is important for imbalanced classes to ensure representative samples.\n",
    "\n",
    "# Dimensions & Output\n",
    "```\n",
    "row, col = X.shape[1], X.shape[2]\n",
    "categories = y_ohe.shape[1]\n",
    "print(f'One-hot encoded dimensions = {row, col, categories}')\n",
    "```\n",
    "## Significance\n",
    "row, col: The height and width of our input images (assuming X is shaped [samples, height, width]).\n",
    "categories: The number of unique classes in our dataset. Useful for setting up the output layer of our neural network.\n",
    "\n",
    "The final layer of the network has categories neurons for multi-class tasks with softmax.\n",
    "Normalization ensures numerical stability. Label + One-Hot Encoding converts categorical labels to a format suitable for multi-class classification. `train_test_split` with stratify keeps the class distribution consistent.\n",
    "The shape of the data `(row, col)` and number of categories define how the network’s input and output layers are configured."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1db27988",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-19T17:33:10.084260Z",
     "iopub.status.busy": "2025-02-19T17:33:10.083953Z",
     "iopub.status.idle": "2025-02-19T17:33:10.116698Z",
     "shell.execute_reply": "2025-02-19T17:33:10.115621Z"
    },
    "papermill": {
     "duration": 0.041098,
     "end_time": "2025-02-19T17:33:10.118389",
     "exception": false,
     "start_time": "2025-02-19T17:33:10.077291",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "One-hot encoded dimensions = (40, 20, 19)\n"
     ]
    }
   ],
   "source": [
    "# Normalize feature data to the range [0, 1]\n",
    "X = X.astype(np.float32) / 255.0\n",
    "\n",
    "# Encode labels using LabelEncoder and OneHotEncoder\n",
    "from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n",
    "label_encoder = LabelEncoder()\n",
    "y_le = label_encoder.fit_transform(y)\n",
    "\n",
    "onehot_encoder = OneHotEncoder(sparse_output=False)\n",
    "y_ohe = onehot_encoder.fit_transform(y_le.reshape(-1, 1))\n",
    "\n",
    "# Split the dataset into training and testing sets\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y_ohe, test_size=0.3, random_state=95, stratify=y_le\n",
    ")\n",
    "# random_state changed from 42 to even funnier number\n",
    "# Extract row and column dimensions\n",
    "row, col = X.shape[1], X.shape[2]\n",
    "categories = y_ohe.shape[1]\n",
    "print(f'One-hot encoded dimensions = {row, col, categories}')\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea2d437e",
   "metadata": {
    "papermill": {
     "duration": 0.005818,
     "end_time": "2025-02-19T17:33:10.131120",
     "exception": false,
     "start_time": "2025-02-19T17:33:10.125302",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model Definition and Training Phase Write-Up\n",
    "\n",
    "This section explains the design of our dense model and the associated training configuration, discussing different approaches, considerations, and hyperparameter tuning strategies based on the code.\n",
    "\n",
    "## Model Architecture\n",
    "\n",
    "### Dense Model with LeakyReLU\n",
    "- **Dense Layers:**  \n",
    "  The model is built as a sequential network with multiple fully connected (Dense) layers. It starts with 1024 neurons in the first layer, followed by layers with 512, 256, and 128 neurons. A larger initial layer captures a high-dimensional representation of the flattened input images.\n",
    "  \n",
    "- **Activation Function (LeakyReLU):**  \n",
    "  Instead of standard ReLU, we use LeakyReLU with an alpha of 0.15. This allows a small gradient for negative inputs, reducing the chance of \"dying\" neurons and ensuring that some gradient flows even when activations are negative.\n",
    "\n",
    "- **BatchNormalization:**  \n",
    "  BatchNormalization is applied after each activation to stabilize learning by normalizing the activations. This helps accelerate training and makes the network less sensitive to initialization.\n",
    "\n",
    "- **Dropout:**  \n",
    "  Dropout layers with rates of 0.5, 0.4, 0.3, and 0.3 are interleaved between Dense layers. Higher dropout in the larger layers (e.g., 0.5 after the 1024-neuron layer) helps prevent overfitting by randomly dropping units during training.\n",
    "\n",
    "- **Output Layer:**  \n",
    "  The final Dense layer uses a softmax activation and has a number of neurons equal to the number of output categories (as derived from one-hot encoding of labels), making it suitable for multi-class classification.\n",
    "\n",
    "### Alternative with PReLU (Commented Out)\n",
    "- **PReLU:**  \n",
    "  An alternative model using Parametric ReLU (PReLU) is provided, where the negative slope is trainable (initialized to 0.1). This gives the model the flexibility to learn the best slope for negative inputs, potentially offering improved performance in some cases.\n",
    "\n",
    "## Data Preparation\n",
    "\n",
    "- **Flattening:**  \n",
    "  The input images are flattened (converted from 2D to 1D arrays) before being fed into Dense layers. This is necessary because Dense layers expect vectorized input rather than 2D images.\n",
    "  \n",
    "- **Normalization:**  \n",
    "  The pixel values are normalized to the range [0, 1] by dividing by 255.0. This scaling is crucial for stable and effective training.\n",
    "\n",
    "## Training Configuration\n",
    "\n",
    "- **Optimizer:**  \n",
    "  The model is compiled using the Adam optimizer with a learning rate of 0.001. Adam's adaptive learning rate helps manage the step size during gradient descent.\n",
    "\n",
    "- **Loss Function:**  \n",
    "  Categorical cross-entropy is used as the loss function, which is standard for multi-class classification tasks.\n",
    "\n",
    "- **Callbacks:**  \n",
    "  - **EarlyStopping:** Monitors the validation loss and stops training if no improvement is observed for 25 epochs. It also restores the best weights, preventing overfitting.\n",
    "  - **ModelCheckpoint:** Saves the best model (based on minimum validation loss) to a specified filepath. This ensures that the optimal model is retained even if further epochs degrade performance.\n",
    "\n",
    "- **Training Details:**  \n",
    "  The training is set to run for up to 100 epochs with a batch size of 128. A validation split of 20% is used from the training data to monitor the model’s performance during training. The batch size is chosen to provide stable gradient updates while balancing computational efficiency.\n",
    "\n",
    "## Hyperparameter Tuning Considerations\n",
    "\n",
    "- **Activation Functions:**  \n",
    "  LeakyReLU with an alpha of 0.15 is chosen to allow negative inputs to contribute to the gradient. Experimenting with different alpha values (or switching to PReLU) can help find the optimal setting for the OCR task.\n",
    "\n",
    "- **Layer Sizes and Dropout Rates:**  \n",
    "  Increasing neurons in early layers (e.g., 1024 neurons) captures more complex features, while dropout helps prevent overfitting. Adjusting these values (such as trying 512 or 256 neurons in later layers, or varying dropout rates) can improve generalization.\n",
    "\n",
    "- **Learning Rate and Optimizer:**  \n",
    "  A learning rate of 0.001 is a common starting point. Fine-tuning the learning rate or using learning rate schedulers can further enhance convergence speed and final accuracy.\n",
    "\n",
    "- **Batch Size and Epochs:**  \n",
    "  A larger batch size (128) can lead to more stable gradient updates, though it might require adjustments in the patience of EarlyStopping. The number of epochs (up to 100) is set high enough to allow convergence, with EarlyStopping preventing over-training.\n",
    "\n",
    "This comprehensive configuration, along with careful hyperparameter tuning (via grid search or other methods), is designed to maximize the model’s validation performance while minimizing overfitting and ensuring robust generalization on unseen captcha images.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9d536959",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-19T17:33:10.143924Z",
     "iopub.status.busy": "2025-02-19T17:33:10.143637Z",
     "iopub.status.idle": "2025-02-19T17:33:35.319008Z",
     "shell.execute_reply": "2025-02-19T17:33:35.318005Z"
    },
    "papermill": {
     "duration": 25.18341,
     "end_time": "2025-02-19T17:33:35.320431",
     "exception": false,
     "start_time": "2025-02-19T17:33:10.137021",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n",
      "/usr/local/lib/python3.10/dist-packages/keras/src/layers/activations/leaky_relu.py:41: UserWarning: Argument `alpha` is deprecated. Use `negative_slope` instead.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)                │         <span style=\"color: #00af00; text-decoration-color: #00af00\">820,224</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ leaky_re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LeakyReLU</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)                │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)                │           <span style=\"color: #00af00; text-decoration-color: #00af00\">4,096</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)                │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │         <span style=\"color: #00af00; text-decoration-color: #00af00\">524,800</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ leaky_re_lu_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LeakyReLU</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,048</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)                 │         <span style=\"color: #00af00; text-decoration-color: #00af00\">131,328</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ leaky_re_lu_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LeakyReLU</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_2                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │          <span style=\"color: #00af00; text-decoration-color: #00af00\">32,896</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ leaky_re_lu_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LeakyReLU</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_3                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │             <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">19</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,451</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)                │         \u001b[38;5;34m820,224\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ leaky_re_lu (\u001b[38;5;33mLeakyReLU\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)                │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)                │           \u001b[38;5;34m4,096\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)                │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │         \u001b[38;5;34m524,800\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ leaky_re_lu_1 (\u001b[38;5;33mLeakyReLU\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │           \u001b[38;5;34m2,048\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)                 │         \u001b[38;5;34m131,328\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ leaky_re_lu_2 (\u001b[38;5;33mLeakyReLU\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_2                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)                 │           \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │          \u001b[38;5;34m32,896\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ leaky_re_lu_3 (\u001b[38;5;33mLeakyReLU\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_3                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │             \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_3 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m19\u001b[0m)                  │           \u001b[38;5;34m2,451\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,519,379</span> (5.80 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m1,519,379\u001b[0m (5.80 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,515,539</span> (5.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,515,539\u001b[0m (5.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">3,840</span> (15.00 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m3,840\u001b[0m (15.00 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 172ms/step - accuracy: 0.2345 - loss: 2.8159\n",
      "Epoch 1: val_loss improved from inf to 2.93301, saving model to /kaggle/working/model_checkpoint.keras\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 232ms/step - accuracy: 0.2393 - loss: 2.7947 - val_accuracy: 0.0534 - val_loss: 2.9330\n",
      "Epoch 2/100\n",
      "\u001b[1m19/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5650 - loss: 1.5130 \n",
      "Epoch 2: val_loss did not improve from 2.93301\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.5730 - loss: 1.4849 - val_accuracy: 0.0908 - val_loss: 2.9351\n",
      "Epoch 3/100\n",
      "\u001b[1m19/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6843 - loss: 1.1398 \n",
      "Epoch 3: val_loss did not improve from 2.93301\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6843 - loss: 1.1391 - val_accuracy: 0.0601 - val_loss: 2.9560\n",
      "Epoch 4/100\n",
      "\u001b[1m20/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6917 - loss: 1.0383 \n",
      "Epoch 4: val_loss did not improve from 2.93301\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6931 - loss: 1.0370 - val_accuracy: 0.1095 - val_loss: 2.9806\n",
      "Epoch 5/100\n",
      "\u001b[1m20/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7292 - loss: 0.9637 \n",
      "Epoch 5: val_loss did not improve from 2.93301\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.7313 - loss: 0.9569 - val_accuracy: 0.1829 - val_loss: 3.0141\n",
      "Epoch 6/100\n",
      "\u001b[1m20/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7700 - loss: 0.8174 \n",
      "Epoch 6: val_loss did not improve from 2.93301\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.7677 - loss: 0.8240 - val_accuracy: 0.1682 - val_loss: 3.0532\n",
      "Epoch 7/100\n",
      "\u001b[1m21/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7632 - loss: 0.8062 \n",
      "Epoch 7: val_loss did not improve from 2.93301\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.7651 - loss: 0.8040 - val_accuracy: 0.1575 - val_loss: 3.0721\n",
      "Epoch 8/100\n",
      "\u001b[1m21/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7857 - loss: 0.7299 \n",
      "Epoch 8: val_loss did not improve from 2.93301\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.7858 - loss: 0.7302 - val_accuracy: 0.1081 - val_loss: 3.1047\n",
      "Epoch 9/100\n",
      "\u001b[1m21/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8018 - loss: 0.6863 \n",
      "Epoch 9: val_loss did not improve from 2.93301\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8014 - loss: 0.6880 - val_accuracy: 0.0521 - val_loss: 3.1252\n",
      "Epoch 10/100\n",
      "\u001b[1m21/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7970 - loss: 0.6890 \n",
      "Epoch 10: val_loss did not improve from 2.93301\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.7974 - loss: 0.6903 - val_accuracy: 0.0708 - val_loss: 3.1546\n",
      "Epoch 11/100\n",
      "\u001b[1m21/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8149 - loss: 0.6612 \n",
      "Epoch 11: val_loss did not improve from 2.93301\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8142 - loss: 0.6606 - val_accuracy: 0.0587 - val_loss: 3.1938\n",
      "Epoch 12/100\n",
      "\u001b[1m21/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8230 - loss: 0.5882 \n",
      "Epoch 12: val_loss did not improve from 2.93301\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8226 - loss: 0.5927 - val_accuracy: 0.0521 - val_loss: 3.2330\n",
      "Epoch 13/100\n",
      "\u001b[1m20/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8492 - loss: 0.5461 \n",
      "Epoch 13: val_loss did not improve from 2.93301\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8456 - loss: 0.5550 - val_accuracy: 0.0547 - val_loss: 3.2308\n",
      "Epoch 14/100\n",
      "\u001b[1m20/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8237 - loss: 0.6072 \n",
      "Epoch 14: val_loss did not improve from 2.93301\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8253 - loss: 0.6032 - val_accuracy: 0.0601 - val_loss: 3.2308\n",
      "Epoch 15/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8581 - loss: 0.4907 \n",
      "Epoch 15: val_loss did not improve from 2.93301\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8567 - loss: 0.5019 - val_accuracy: 0.0614 - val_loss: 3.2272\n",
      "Epoch 16/100\n",
      "\u001b[1m17/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8411 - loss: 0.5412 \n",
      "Epoch 16: val_loss did not improve from 2.93301\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8426 - loss: 0.5370 - val_accuracy: 0.0587 - val_loss: 3.1719\n",
      "Epoch 17/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8474 - loss: 0.5058 \n",
      "Epoch 17: val_loss did not improve from 2.93301\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8464 - loss: 0.5113 - val_accuracy: 0.0587 - val_loss: 3.0539\n",
      "Epoch 18/100\n",
      "\u001b[1m19/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8590 - loss: 0.4944 \n",
      "Epoch 18: val_loss improved from 2.93301 to 2.88254, saving model to /kaggle/working/model_checkpoint.keras\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8571 - loss: 0.4988 - val_accuracy: 0.0988 - val_loss: 2.8825\n",
      "Epoch 19/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8728 - loss: 0.4456 \n",
      "Epoch 19: val_loss improved from 2.88254 to 2.66447, saving model to /kaggle/working/model_checkpoint.keras\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8680 - loss: 0.4576 - val_accuracy: 0.1602 - val_loss: 2.6645\n",
      "Epoch 20/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8634 - loss: 0.4609 \n",
      "Epoch 20: val_loss improved from 2.66447 to 2.55797, saving model to /kaggle/working/model_checkpoint.keras\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8618 - loss: 0.4658 - val_accuracy: 0.1629 - val_loss: 2.5580\n",
      "Epoch 21/100\n",
      "\u001b[1m17/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8516 - loss: 0.4629 \n",
      "Epoch 21: val_loss improved from 2.55797 to 2.07967, saving model to /kaggle/working/model_checkpoint.keras\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8549 - loss: 0.4601 - val_accuracy: 0.2577 - val_loss: 2.0797\n",
      "Epoch 22/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8628 - loss: 0.5075 \n",
      "Epoch 22: val_loss improved from 2.07967 to 1.97172, saving model to /kaggle/working/model_checkpoint.keras\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8627 - loss: 0.4938 - val_accuracy: 0.2857 - val_loss: 1.9717\n",
      "Epoch 23/100\n",
      "\u001b[1m17/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8544 - loss: 0.4428 \n",
      "Epoch 23: val_loss improved from 1.97172 to 1.48074, saving model to /kaggle/working/model_checkpoint.keras\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8561 - loss: 0.4471 - val_accuracy: 0.4913 - val_loss: 1.4807\n",
      "Epoch 24/100\n",
      "\u001b[1m17/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8640 - loss: 0.4308 \n",
      "Epoch 24: val_loss improved from 1.48074 to 1.17747, saving model to /kaggle/working/model_checkpoint.keras\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8637 - loss: 0.4380 - val_accuracy: 0.6315 - val_loss: 1.1775\n",
      "Epoch 25/100\n",
      "\u001b[1m17/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8691 - loss: 0.4182 \n",
      "Epoch 25: val_loss improved from 1.17747 to 0.90765, saving model to /kaggle/working/model_checkpoint.keras\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8684 - loss: 0.4210 - val_accuracy: 0.7196 - val_loss: 0.9076\n",
      "Epoch 26/100\n",
      "\u001b[1m17/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8832 - loss: 0.4084 \n",
      "Epoch 26: val_loss improved from 0.90765 to 0.75526, saving model to /kaggle/working/model_checkpoint.keras\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.8840 - loss: 0.4001 - val_accuracy: 0.7784 - val_loss: 0.7553\n",
      "Epoch 27/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8946 - loss: 0.3800 \n",
      "Epoch 27: val_loss improved from 0.75526 to 0.69019, saving model to /kaggle/working/model_checkpoint.keras\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8904 - loss: 0.3847 - val_accuracy: 0.7837 - val_loss: 0.6902\n",
      "Epoch 28/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8857 - loss: 0.3561 \n",
      "Epoch 28: val_loss improved from 0.69019 to 0.66636, saving model to /kaggle/working/model_checkpoint.keras\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8847 - loss: 0.3641 - val_accuracy: 0.7917 - val_loss: 0.6664\n",
      "Epoch 29/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8741 - loss: 0.4056 \n",
      "Epoch 29: val_loss improved from 0.66636 to 0.58299, saving model to /kaggle/working/model_checkpoint.keras\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8752 - loss: 0.4048 - val_accuracy: 0.8224 - val_loss: 0.5830\n",
      "Epoch 30/100\n",
      "\u001b[1m16/24\u001b[0m \u001b[32m━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8811 - loss: 0.3811 \n",
      "Epoch 30: val_loss improved from 0.58299 to 0.53355, saving model to /kaggle/working/model_checkpoint.keras\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8818 - loss: 0.3816 - val_accuracy: 0.8425 - val_loss: 0.5335\n",
      "Epoch 31/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8897 - loss: 0.3545 \n",
      "Epoch 31: val_loss did not improve from 0.53355\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8903 - loss: 0.3572 - val_accuracy: 0.8371 - val_loss: 0.5491\n",
      "Epoch 32/100\n",
      "\u001b[1m17/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8831 - loss: 0.3672 \n",
      "Epoch 32: val_loss improved from 0.53355 to 0.52828, saving model to /kaggle/working/model_checkpoint.keras\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8834 - loss: 0.3681 - val_accuracy: 0.8451 - val_loss: 0.5283\n",
      "Epoch 33/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8937 - loss: 0.3242 \n",
      "Epoch 33: val_loss improved from 0.52828 to 0.47208, saving model to /kaggle/working/model_checkpoint.keras\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8931 - loss: 0.3301 - val_accuracy: 0.8652 - val_loss: 0.4721\n",
      "Epoch 34/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8832 - loss: 0.3485 \n",
      "Epoch 34: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8851 - loss: 0.3475 - val_accuracy: 0.8585 - val_loss: 0.4944\n",
      "Epoch 35/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8963 - loss: 0.3274 \n",
      "Epoch 35: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8973 - loss: 0.3289 - val_accuracy: 0.8718 - val_loss: 0.4732\n",
      "Epoch 36/100\n",
      "\u001b[1m17/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9056 - loss: 0.3098 \n",
      "Epoch 36: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9027 - loss: 0.3168 - val_accuracy: 0.8732 - val_loss: 0.4849\n",
      "Epoch 37/100\n",
      "\u001b[1m16/24\u001b[0m \u001b[32m━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8966 - loss: 0.3075 \n",
      "Epoch 37: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.8971 - loss: 0.3123 - val_accuracy: 0.8705 - val_loss: 0.4855\n",
      "Epoch 38/100\n",
      "\u001b[1m17/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9037 - loss: 0.2980 \n",
      "Epoch 38: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9009 - loss: 0.3053 - val_accuracy: 0.8692 - val_loss: 0.4831\n",
      "Epoch 39/100\n",
      "\u001b[1m16/24\u001b[0m \u001b[32m━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9011 - loss: 0.3063 \n",
      "Epoch 39: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8979 - loss: 0.3126 - val_accuracy: 0.8611 - val_loss: 0.5041\n",
      "Epoch 40/100\n",
      "\u001b[1m17/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8977 - loss: 0.3181 \n",
      "Epoch 40: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8986 - loss: 0.3169 - val_accuracy: 0.8692 - val_loss: 0.5011\n",
      "Epoch 41/100\n",
      "\u001b[1m17/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9028 - loss: 0.3140 \n",
      "Epoch 41: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9011 - loss: 0.3165 - val_accuracy: 0.8665 - val_loss: 0.4872\n",
      "Epoch 42/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9151 - loss: 0.2769 \n",
      "Epoch 42: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9136 - loss: 0.2798 - val_accuracy: 0.8665 - val_loss: 0.5260\n",
      "Epoch 43/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9214 - loss: 0.2613 \n",
      "Epoch 43: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9185 - loss: 0.2685 - val_accuracy: 0.8745 - val_loss: 0.4971\n",
      "Epoch 44/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9017 - loss: 0.3015 \n",
      "Epoch 44: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9005 - loss: 0.3025 - val_accuracy: 0.8638 - val_loss: 0.5005\n",
      "Epoch 45/100\n",
      "\u001b[1m19/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9033 - loss: 0.2885 \n",
      "Epoch 45: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9027 - loss: 0.2889 - val_accuracy: 0.8692 - val_loss: 0.5023\n",
      "Epoch 46/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9126 - loss: 0.2749 \n",
      "Epoch 46: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9111 - loss: 0.2758 - val_accuracy: 0.8625 - val_loss: 0.5200\n",
      "Epoch 47/100\n",
      "\u001b[1m19/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9075 - loss: 0.2798 \n",
      "Epoch 47: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9079 - loss: 0.2803 - val_accuracy: 0.8625 - val_loss: 0.5298\n",
      "Epoch 48/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9105 - loss: 0.2563 \n",
      "Epoch 48: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9114 - loss: 0.2593 - val_accuracy: 0.8758 - val_loss: 0.4921\n",
      "Epoch 49/100\n",
      "\u001b[1m19/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9112 - loss: 0.2705 \n",
      "Epoch 49: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9096 - loss: 0.2733 - val_accuracy: 0.8798 - val_loss: 0.4920\n",
      "Epoch 50/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9084 - loss: 0.2722 \n",
      "Epoch 50: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9084 - loss: 0.2759 - val_accuracy: 0.8692 - val_loss: 0.4959\n",
      "Epoch 51/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9087 - loss: 0.2518 \n",
      "Epoch 51: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9098 - loss: 0.2560 - val_accuracy: 0.8705 - val_loss: 0.4994\n",
      "Epoch 52/100\n",
      "\u001b[1m18/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9194 - loss: 0.2448 \n",
      "Epoch 52: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9186 - loss: 0.2514 - val_accuracy: 0.8732 - val_loss: 0.5064\n",
      "Epoch 53/100\n",
      "\u001b[1m16/24\u001b[0m \u001b[32m━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9222 - loss: 0.2340 \n",
      "Epoch 53: val_loss did not improve from 0.47208\n",
      "\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9209 - loss: 0.2419 - val_accuracy: 0.8718 - val_loss: 0.5149\n",
      "\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.8596 - loss: 0.5062\n",
      "Test Loss: 0.4710\n",
      "Test Accuracy: 0.86\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout, BatchNormalization, Flatten, LeakyReLU\n",
    "from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n",
    "from tensorflow.keras.optimizers import Adam # Flatten X_train and X_test to 1D arrays since we're not using CNN\n",
    "from tensorflow.keras.callbacks import ModelCheckpoint\n",
    "X_train_flat = X_train.reshape(X_train.shape[0], -1)  # Flatten the image for Dense layers\n",
    "X_test_flat = X_test.reshape(X_test.shape[0], -1)\n",
    "\n",
    "\n",
    "# model = Sequential([\n",
    "#     Dense(512, activation='relu', input_shape=(X_train_flat.shape[1],)),  # Increased neurons in the first layer\n",
    "#     BatchNormalization(),\n",
    "#     Dropout(0.4),  # Adjusted dropout rate\n",
    "#     Dense(256, activation='relu'), # gonna adjust this\n",
    "#     BatchNormalization(),\n",
    "#     Dropout(0.3),\n",
    "#     Dense(128, activation='relu'),\n",
    "#     BatchNormalization(),\n",
    "#     Dropout(0.3),\n",
    "#     Dense(y_train.shape[1], activation='softmax')  # Output layer with number of categories\n",
    "# ])\n",
    "\n",
    "model = Sequential([\n",
    "    Dense(1024, input_shape=(X_train_flat.shape[1],)),\n",
    "    LeakyReLU(alpha=0.15),  # Using LeakyReLU with a small negative slope\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.5),\n",
    "\n",
    "    Dense(512),\n",
    "    LeakyReLU(alpha=0.15),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.4),\n",
    "    \n",
    "    Dense(256),\n",
    "    LeakyReLU(alpha=0.15),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.3),\n",
    "    \n",
    "    Dense(128),\n",
    "    LeakyReLU(alpha=0.15),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.3),\n",
    "    \n",
    "    Dense(y_ohe.shape[1], activation='softmax')\n",
    "    # Dense(y_train.shape[1], activation='softmax')  # Output layer with number of categories\n",
    "])\n",
    "\n",
    "# from tensorflow.keras.models import Sequential\n",
    "# from tensorflow.keras.layers import Dense, BatchNormalization, Dropout, PReLU\n",
    "# from tensorflow.keras.initializers import Constant\n",
    "\n",
    "# model = Sequential([\n",
    "   \n",
    "#     Dense(512, input_shape=(X_train_flat.shape[1],)),\n",
    "#     PReLU(alpha_initializer=Constant(0.1)),\n",
    "#     BatchNormalization(),\n",
    "#     Dropout(0.4),\n",
    "    \n",
    "#     Dense(256),\n",
    "#     PReLU(alpha_initializer=Constant(0.1)),\n",
    "#     BatchNormalization(),\n",
    "#     Dropout(0.3),\n",
    "    \n",
    "#     Dense(256),\n",
    "#     PReLU(alpha_initializer=Constant(0.1)),\n",
    "#     BatchNormalization(),\n",
    "#     Dropout(0.3),\n",
    "    \n",
    "#     Dense(y_train.shape[1], activation='softmax')  # Output layer with number of categories\n",
    "# ])\n",
    "\n",
    "\n",
    "# Compile the model with a learning rate scheduler\n",
    "optimizer = Adam(learning_rate=0.001)  # Learning rate delta 0.000\n",
    "\n",
    "model.compile(\n",
    "    optimizer=optimizer,\n",
    "    loss='categorical_crossentropy',\n",
    "    metrics=['accuracy']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Setup EarlyStopping \n",
    "# no ModelCheckpoint\n",
    "early_stopping = EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=20,  # Stop training if no improvement for 20 epochs\n",
    "    restore_best_weights=True\n",
    ")\n",
    "\n",
    "checkpoint_callback = ModelCheckpoint (\n",
    "    filepath='/kaggle/working/model_checkpoint.keras',\n",
    "    # save_weights_only=True,\n",
    "    monitor='val_loss',\n",
    "    mode='min',\n",
    "    save_best_only=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# model_checkpoint = ModelCheckpoint(\n",
    "#     '/kaggle/working/best_model.keras',\n",
    "#     monitor='val_loss',\n",
    "#     save_best_only=True,\n",
    "#     mode='min'\n",
    "# )\n",
    "\n",
    "# Train the model with callbacks\n",
    "history = model.fit(\n",
    "    X_train_flat,\n",
    "    y_train,\n",
    "    validation_split=0.2,  # Split part of the training set for validation\n",
    "    epochs=100,            # Number of epochs to train\n",
    "    batch_size=128,        # Increased batch size for stable gradient updates, trying more. Increasing this -> EarlyStopping patience +\n",
    "    verbose=1,\n",
    "    callbacks=[early_stopping, checkpoint_callback]\n",
    ")\n",
    "\n",
    "# Evaluate the model on the test data\n",
    "test_loss, test_accuracy = model.evaluate(X_test_flat, y_test, verbose=1)\n",
    "print(f\"Test Loss: {test_loss:.4f}\")\n",
    "print(f\"Test Accuracy: {test_accuracy:.2f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6eac711d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-19T17:33:35.361879Z",
     "iopub.status.busy": "2025-02-19T17:33:35.361535Z",
     "iopub.status.idle": "2025-02-19T17:33:37.830580Z",
     "shell.execute_reply": "2025-02-19T17:33:37.829325Z"
    },
    "papermill": {
     "duration": 2.491122,
     "end_time": "2025-02-19T17:33:37.832455",
     "exception": false,
     "start_time": "2025-02-19T17:33:35.341333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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GRISEvDx8WHdunX8/e9/L9dKKO7u7ic9bhhGlV5bHlu2bCE9Pd317ZSHhwdz5szhwgsv5LLLLmPx4sV8+umnREVFuea2n87ll19OcHAws2bN4rrrrmPWrFm4u7tz7bXXus656667mD59OpMnT6Z3794EBwdjs9m49tprq3Rp4WuuuYYVK1bw4IMP0rlzZwICAnA4HAwdOrTKlzR2Ots/z59++olDhw4xe/ZsZs+eXebxmTNncvHFF1dKjE6nqpj6azNZJ29v7zJLM9vtdgYPHkxaWhp///vfad26Nf7+/hw4cIDx48ef1ec+duxY7rnnHvbv309BQQG//vorb775ZoWfR0REai6NyTQmq2pV/edZHv3792fXrl0sWLCAH374gf/+97+8+uqrvPvuu9x8880ATJ48mWHDhjF//ny+//57nnjiCaZOncpPP/1Ely5dqi1WkfJSUkqkki1ZsoTU1FTmzp1balndPXv2WBjVcVFRUfj4+Jx0tZDyrCDiTDw4v7EB8Pf355tvvqFfv34MGTKE/Px8nnvuuXItvevt7c1VV13FRx99RHJyMp9//jkXXnghMTExrnPmzJnDuHHjePnll13H8vPzT7o6y5nExcWxaNEisrOzS30zt23btlLnHTt2jEWLFvH000+7mnsCJy2Xrsj0tbi4uDKvBbimEMTFxZX7uU5n5syZREVF8dZbb5V5bO7cucybN493330XX19fEhIS2LRp02mfLyEhgVWrVlFUVHTKxq7Obwz/+ufy128aT2fjxo1s376dDz/8kLFjx7qOn7iqDOAqbz9T3ADXXnst9913H59++il5eXl4enoyevTocsckIiK1k8ZkGpOd6fWrY0x2JpGRkfj5+Z0yFjc3N2JjY13HwsLCmDBhAhMmTCA7O5v+/fszZcoUV1IKzHHb/fffz/3338+OHTvo3LkzL7/8Mp988km1vCeRitD0PZFK5vwW5cRvTQoLC3n77betCqkUd3d3Bg0axPz58zl48KDr+M6dO/n222/PeH2HDh2Ijo7mzTff5MiRI67j4eHhTJ8+nZSUFPLy8hg2bFi5Y7r++uspKiritttu4+jRo6XKxJ0x//VbqDfeeOOUFTinc+mll1JcXMw777zjOma323njjTfKvCaU/fZr2rRpZZ7T398fKJuMOdXrr169mpUrV7qO5eTk8N577xEfH0/btm3L+1ZOKS8vj7lz53L55Zdz1VVXldkmTZpEVlYWX375JWCu0rJhwwbmzZtX5rmc73/UqFGkpKSctMLIeU5cXBzu7u4sXbq01OMV+bt/ss/dMAxee+21UudFRkbSv39/PvjgA5KSkk4aj1NERASXXHIJn3zyCTNnzmTo0KGuFXlERKTu0phMY7IzvX5Vj8nKw93dnYsvvpgFCxawd+9e1/Hk5GRmzZpFv379CAoKAsxVJk8UEBBA8+bNKSgoACA3N5f8/PxS5yQkJBAYGOg6R6SmUaWUSCXr06cPoaGhjBs3jrvvvhubzcbHH39craW9ZzJlyhR++OEH+vbtyx133IHdbufNN9+kffv2rF+//rTXenh48OabbzJ69Gg6dOjAbbfdRlxcHFu2bOGDDz6gQ4cO7N+/nyuvvJLly5e7/hM9nQEDBtC4cWMWLFiAr68vI0eOLPX45Zdfzscff0xwcDBt27Zl5cqV/Pjjj67llCti2LBh9O3bl4cffpi9e/fStm1b5s6dW6YfQVBQkGseflFREY0aNeKHH3446berXbt2BeCxxx7j2muvxdPTk2HDhrkGRid6+OGH+fTTT7nkkku4++67CQsL48MPP2TPnj188cUXZaaznY0vv/ySrKwsrrjiipM+3qtXLyIjI5k5cyajR4/mwQcfZM6cOVx99dXceOONdO3albS0NL788kveffddOnXqxNixY/noo4+47777WL16Neeffz45OTn8+OOP3HnnnVx55ZUEBwdz9dVX88Ybb2Cz2UhISOCrr74qNVA+k9atW5OQkMADDzzAgQMHCAoK4osvvjhpv4bXX3+dfv36cd5553HrrbfStGlT9u7dy9dff13m7/HYsWO56qqrAHj22WfL/2GKiEitpTGZxmRWj8lO9MEHH/Ddd9+VOX7PPffw3HPPsXDhQvr168edd96Jh4cH//73vykoKODFF190ndu2bVsGDhxI165dCQsLY+3atcyZM4dJkyYBsH37di666CKuueYa2rZti4eHB/PmzSM5ObnUNEyRGqU6l/oTqa1Otfxwu3btTnr+8uXLjV69ehm+vr5Gw4YNjYceesj4/vvvz7g0rnP54ZMt4wqUWsL+VMsPT5w4scy1f10C1zAMY9GiRUaXLl0MLy8vIyEhwfjvf/9r3H///YaPj88pPoXSli5dagwZMsQICgoyvL29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vAUc+E3NzkWkzqlwUmrYsGHMnz+fF154gTlz5uDr60unTp346aefCAsLq4oYa6X8IjtZBcWApu+JAJBVMnXPLwI8lKgVEZHycXezEernRVpOIak5BUpKSf0UUVIppWbnIlLHVHj6HsBll13G8uXLycnJYffu3VxzzTU88MADdOrUqbLjq7VSS/oeeLrbCPKpcO5PpO7JLGlyHqQqKRERqRhns/O0bPWVknrK2exclVIiUsecVVIKzFX4xo0bR8OGDXn55Ze58MIL+fXXXysztlot1dlPyt8bm81mcTQiNYCzUipQTc5FRKRinEmpVDU7l/oqwpmU2mnOZRURqSMqVMJz+PBhZsyYwfvvv09mZibXXHMNBQUFzJ8/X03O/8K18l6gpimJAKqUEhGRsxahFfikvgtrBtggPwNyUiAg0uqIREQqRbkrpYYNG0arVq34448/mDZtGgcPHuSNN96oythqtaMnVEqJCKqUEhGpREuXLmXYsGE0bNgQm83G/PnzT3v+kiVLsNlsZbbDhw9XT8DnyFUpVTK+Eql3PH0hONbc1xQ+EalDyp2U+vbbb7npppt4+umnueyyy3B3d6/KuGo9V6WUmpyLmFQpJSJSaXJycujUqRNvvfVWha7btm0bhw4dcm1RUVFVFGHlCiv5kk/T96ReczU7V1JKROqOck/fW7ZsGe+//z5du3alTZs23HDDDVx77bVVGVut5vwmz1luLlLvZZUkpVQpJSJyzi655BIuueSSCl8XFRVFSEhI5QdUxcL9NX1PhPAWsOsns6+UiEgdUe5KqV69evGf//yHQ4cOcdtttzF79mwaNmyIw+Fg4cKFZGVlVWWctU6Kc/qeklIipsyS6XuqlBIRsUznzp1p0KABgwcPZvny5ac9t6CggMzMzFKbVZzjKVVKSb0WXlIppaSUiNQhFV59z9/fnxtvvJFly5axceNG7r//fv7xj38QFRXFFVdcURUx1krOQZOm74kARfmQl2buByopJSJS3Ro0aMC7777LF198wRdffEFsbCwDBw5k3bp1p7xm6tSpBAcHu7bY2NhqjLi0MFVKiWj6nojUSRVOSp2oVatWvPjii+zfv59PP/30rJ/nrbfeIj4+Hh8fH3r27Mnq1avLdd3s2bOx2WwMHz78rF+7qhzNclZKKSkl4pq65+EDvqHWxiIiUg+1atWK2267ja5d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bLnie+WVVwgNDaV3796MGDGCYcOG0blz5zLnTJ06lauuuop77rmHVq1acccdd5CTk1PmnNtuu43CwkJuueWWs20iERERkRrLz8uDvs3rcvcA6xfUshnHF3uoBTIzMwkODiYjI+Osi82KiNQ2+fn57NmzhyZNmuDjc5qVMUWqoN9++41BgwaRkJBwxlFlp/usq+9gUjuIiIhIeZW336DpeyIiIlKjFBQUcOjQISZMmMDVV199ztMcRURERKRyafqeiIiI1CifffYZjRs3Jj09nRdffNHqcERERETkFJSUEhERkRplzJgxOJ1O1qxZQ4MGDawOR0REREROQUkpERERERERERFxOyWlRERERERERETE7ZSUEhGRM6plC7VKLaTPuIiIiIj7KSklIiKn5OnpCUBubq7FkYhUrpLPeMlnXkREREQqn4fVAYiISNXlcDgICQkhJSUFAD8/P2w2m8VRiVQcwzDIzc0lJSWFkJAQHA6H1SGJiIiI1BpKSomIyGlFRkYClCamRGqikJCQ0s+6iIiIiLiHklIiInJaNpuNqKgo6tWrR1FRkdXhiFQ4T09PjZASERERsYCSUiIiUi4Oh0Nf3EVEREREpMKo0LmIiIiIiIiIiLidklIiIiIiIiIiIuJ2SkqJiIiIiIiIiIjb1bqaUoZhAJCZmWlxJCIiIlIdqM9gUh9KREREyqukv1DSfziVWpeUysrKAiA6OtriSERERESqD/WhRERE5GxlZWURHBx8ysdtxpnSVjWMy+Xi4MGDBAYGYrPZKvz6mZmZREdHk5CQQFBQUIVfX8pSe7uX2tu91N7upfZ2r+rU3iVdpaCgoErpO1QX6kPVLGpv91J7u5fa273U3u5VXdrbMAyysrKoX78+dvupK0fVupFSdrudhg0bVvrrBAUFVekPSE2j9nYvtbd7qb3dS+3tXmrv6kN9qJpJ7e1eam/3Unu7l9rbvapDe59uhFQJFToXERERERERERG3U1JKRERERERERETcTkmpCubt7c2TTz6Jt7e31aHUCmpv91J7u5fa273U3u6l9pa/02fCvdTe7qX2di+1t3upvd2rprV3rSt0LiIiIiIiIiIi1tNIKRERERERERERcTslpURERERERERExO2UlBIREREREREREbdTUqqCTZkyhZiYGHx8fOjRowcrV660OqQa4ddff2XEiBHUr18f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JSIiIiIiIiIibqeklIiIiIiIiIiIuJ2SUiIiIiIiIiIi4nZKSomIiIiIiIiIiNspKSUicpZsNhtz5syxOgwRERGRakP9JxE5GSWlRKRaGTNmDDab7YTtwgsvtDo0ERERkSpJ/ScRqao8rA5ARORsXXjhhcyYMaPMfd7e3hZFIyIiIlL1qf8kIlWRRkqJSLXj7e1NZGRkmS00NBQwh4ZPnTqV4cOH4+vrS9OmTfnqq6/KPH/jxo1ccMEF+Pr6EhYWxp133kl2dnaZc6ZPn07btm3x9vYmKiqKsWPHlnk8NTWVK664Aj8/P5o3b87cuXNLHzty5AijRo2ibt26+Pr60rx58xM6gSIiIiLupP6TiFRFSkqJSI3z+OOPM3LkSNavX8+oUaO47rrr2LJlCwA5OTkMGzaM0NBQVq1axZdffskvv/xSptM0depU7r33Xu688042btzI3LlziY2NLfMaTz31FNdccw0bNmzgoosuYtSoURw+fLj09Tdv3syPP/7Ili1bmDp1KuHh4e5rABEREZGzpP6TiFjCEBGpRkaPHm04HA7D39+/zPbcc88ZhmEYgHHXXXeVeU6PHj2Mu+++2zAMw3j33XeN0NBQIzs7u/TxefPmGXa73UhKSjIMwzDq169v/Oc//zllDIDx3//+t/R2dna2ARg//vijYRiGMWLECOOWW26pmDcsIiIi8g+p/yQiVZVqSolItTNw4ECmTp1a5r46deqUHvfq1avMY7169SIuLg6ALVu20KFDB/z9/Usf79OnDy6Xi23btmGz2Th48CCDBg06bQzt27cvPfb39ycoKIiUlBQA7r77bkaOHMnatWsZOnQol19+Ob179z6n9yoiIiJSEdR/EpGqSEkpEal2/P39TxgOXlF8fX3LdZ6np2eZ2zabDZfLBcDw4cPZt28fP/zwAwsWLGDQoEHce++9TJo0qcLjFRERESkP9Z9EpCpSTSkRqXFWrFhxwu3WrVsD0Lp1a9avX09OTk7p48uWLcNut9OyZUsCAwOJiYlh4cKF/yiGunXrMnr0aD7++GMmT57Mu++++4+uJyIiIlKZ1H8SEStopJSIVDsFBQUkJSWVuc/Dw6O0GOaXX35J165dOf/88/nkk09YuXIl06ZNA2DUqFE8+eSTjB49mgkTJnDo0CHuu+8+brrpJiIiIgCYMGECd911F/Xq1WP48OFkZWWxbNky7rvvvnLF98QTT9ClSxfatm1LQUEB33//fWmnTkRERMQK6j+JSFWkpJSIVDvz588nKiqqzH0tW7Zk69atgLmyy6xZs7jnnnuIioris88+o02bNgD4+fnx008/cf/999OtWzf8/PwYOXIkr7zySum1Ro8eTX5+Pq+++ioPPfQQ4eHhXHXVVeWOz8vLi8cee4y9e/fi6+tL3759mTVrVgW8cxEREZFzo/6TiFRFNsMwDKuDEBGpKDabjdmzZ3P55ZdbHYqIiIhItaD+k4hYRTWlRERERERERETE7ZSUEhERERERERERt9P0PRERERERERERcTuNlBIREREREREREbdTUkpERERERERERNxOSSkREREREREREXE7JaVERERERERERMTtlJQSERERERERERG3U1JKRERERERERETcTkkpERERERERERFxOyWlRERERERERETE7ZSUEhERERERERERt/v/rNC33g9qEEsAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision (macro-average): 0.87873389336891\n",
      "Recall (macro-average): 0.8654128235682194\n",
      "F1 Score (Macro-average): 0.8708162338502241\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import confusion_matrix, f1_score, precision_score, recall_score\n",
    "import seaborn as sns\n",
    "\n",
    "# Plot training history (accuracy and loss over epochs)\n",
    "plt.figure(figsize=(12, 5))\n",
    "\n",
    "# Plot Accuracy\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['accuracy'], label='Train Accuracy')\n",
    "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.title('Training & Validation Accuracy')\n",
    "\n",
    "# Plot Loss\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['loss'], label='Train Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.title('Training & Validation Loss')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Generate predictions on the test set\n",
    "y_pred = model.predict(X_test_flat)\n",
    "y_pred_classes = np.argmax(y_pred, axis=1)  # Convert predictions to class indices\n",
    "y_test_classes = np.argmax(y_test, axis=1)  # True test labels\n",
    "\n",
    "# Generate the confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test_classes, y_pred_classes)\n",
    "\n",
    "# Plot the confusion matrix using seaborn heatmap\n",
    "plt.figure(figsize=(10, 8))\n",
    "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')\n",
    "\n",
    "# Set axis labels for the confusion matrix\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()\n",
    "\n",
    "precision = precision_score(y_test_classes, y_pred_classes, average='macro')\n",
    "recall = recall_score(y_test_classes, y_pred_classes, average='macro')\n",
    "\n",
    "print(\"Precision (macro-average):\", precision)\n",
    "print(\"Recall (macro-average):\", recall)\n",
    "\n",
    "\n",
    "f1 = f1_score(y_test_classes, y_pred_classes, average='macro')\n",
    "print(\"F1 Score (Macro-average):\", f1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e3db6a9",
   "metadata": {
    "papermill": {
     "duration": 0.02159,
     "end_time": "2025-02-19T17:33:37.878377",
     "exception": false,
     "start_time": "2025-02-19T17:33:37.856787",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Confusion Matrix and Training History\n",
    "\n",
    "1. **Plotting Training History:**  \n",
    "   - **Accuracy Plot:** The cell plots the training and validation accuracy over epochs. This helps visualize how well the model learns over time and whether it is overfitting or underfitting.\n",
    "   - **Loss Plot:** Similarly, it plots the training and validation loss over epochs to monitor convergence.\n",
    "   - Both plots use `plt.plot` on the `history.history` dictionary (generated during model training) and are arranged side by side using `plt.subplot` for a clear comparison.\n",
    "\n",
    "2. **Generating and Visualizing the Confusion Matrix:**  \n",
    "   - **Predictions:** The model generates predictions on the flattened test set. Since the model outputs probabilities (via softmax), `np.argmax` is used to convert these into discrete class indices.\n",
    "   - **Confusion Matrix Calculation:** The confusion matrix is calculated using scikit-learn's `confusion_matrix` function, which compares the true class indices (`y_test_classes`) with the predicted indices (`y_pred_classes`).\n",
    "   - **Visualization:** The confusion matrix is then plotted as a heatmap using Seaborn (`sns.heatmap`), with annotations to show the count of predictions for each true-predicted pair.\n",
    "\n",
    "# Precision, Recall, F1-Score and Model Performance\n",
    "\n",
    "## F1-Score\n",
    "The F1-score is a performance metric used in classification tasks that combines two key aspects:\n",
    "\n",
    "- **Precision:**  \n",
    "  The ratio of true positive predictions to all positive predictions. It measures how many of the predicted positive cases were actually correct.\n",
    "\n",
    "- **Recall:**  \n",
    "  The ratio of true positive predictions to all actual positive cases. It measures how well the model identifies all relevant instances. The F1-score is the **harmonic mean** of precision and recall\n",
    "\n",
    "This metric is particularly useful when we have imbalanced classes or when we need a balance between precision and recall.\n",
    "\n",
    "An F1-score of approximately **0.86**, as our result turns up, suggests that the model achieves a strong balance between precision and recall. In practical terms:\n",
    "\n",
    "- **High Precision:**  \n",
    "  The model correctly identifies a high proportion of the predicted positive cases.\n",
    "\n",
    "- **High Recall:**  \n",
    "  The model successfully captures most of the actual positive cases.\n",
    "\n",
    "For an OCR application on captcha images, each segmented character is classified into a certain category (e.g., a letter or digit). To compute precision and recall, for each character in the test set, we record the predicted class and the true class. Other definitions,\n",
    "\n",
    "   - **True Positives (TP)**: Cases where the model correctly predicts the character.\n",
    "   - **False Positives (FP)**: Cases where the model incorrectly predicts a character that is not present.\n",
    "   - **False Negatives (FN)**: Cases where the model fails to predict a character that is present.\n",
    "\n",
    "- **Macro-average**: Computes the metric independently for each class and then takes the average, treating all classes equally.\n",
    "- **Micro-average**: Aggregates the contributions of all classes to compute the average metric.\n",
    "\n",
    "## Interpretation\n",
    "- High precision indicates that when the model predicts a character, it is usually correct.\n",
    "- High recall indicates that the model successfully identifies most of the actual characters in the captchas.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7acf9f7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-19T17:33:37.927098Z",
     "iopub.status.busy": "2025-02-19T17:33:37.926735Z",
     "iopub.status.idle": "2025-02-19T17:33:39.498775Z",
     "shell.execute_reply": "2025-02-19T17:33:39.497834Z"
    },
    "papermill": {
     "duration": 1.598818,
     "end_time": "2025-02-19T17:33:39.500839",
     "exception": false,
     "start_time": "2025-02-19T17:33:37.902021",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 416ms/step\n",
      "\n",
      "--- Model Performance Metrics ---\n",
      "Prediction Accuracy: 0.8000\n",
      "Precision: 0.7143\n",
      "Recall: 0.7500\n",
      "F1-Score: 0.7143\n",
      "\n",
      "--- Performance Analysis ---\n",
      "⚠️ Warning: Possible Overfitting! The model performs significantly better on training data than on test data.\n",
      "--------------------------------\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x500 with 20 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import random\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "\n",
    "# Randomly sample a subset of data for evaluation\n",
    "sample_size = 20  # Number of test samples we want to visualize\n",
    "random_indices = random.sample(range(len(X_test_flat)), sample_size)\n",
    "\n",
    "X_test_sampled = X_test_flat[random_indices]\n",
    "y_test_sampled = y_test[random_indices]\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(X_test_sampled)\n",
    "\n",
    "# Decode predictions\n",
    "predicted_labels = np.argmax(predictions, axis=1)\n",
    "actual_labels = np.argmax(y_test_sampled, axis=1)\n",
    "\n",
    "# Calculate Correctness Statistics with zero_division Fix\n",
    "accuracy = accuracy_score(actual_labels, predicted_labels)\n",
    "precision = precision_score(actual_labels, predicted_labels, average=\"macro\", zero_division=0)\n",
    "recall = recall_score(actual_labels, predicted_labels, average=\"macro\", zero_division=0)\n",
    "f1 = f1_score(actual_labels, predicted_labels, average=\"macro\")\n",
    "\n",
    "# Print Statistics\n",
    "print(f\"\\n--- Model Performance Metrics ---\")\n",
    "print(f\"Prediction Accuracy: {accuracy:.4f}\")\n",
    "print(f\"Precision: {precision:.4f}\")\n",
    "print(f\"Recall: {recall:.4f}\")\n",
    "print(f\"F1-Score: {f1:.4f}\\n\")\n",
    "\n",
    "# Check for Overfitting and Underfitting\n",
    "train_accuracy = history.history['accuracy'][-1]  # Last recorded training accuracy\n",
    "val_accuracy = history.history['val_accuracy'][-1]  # Last recorded validation accuracy\n",
    "\n",
    "print(\"--- Performance Analysis ---\")\n",
    "\n",
    "# Overfitting Alert\n",
    "if train_accuracy - accuracy > 0.10:\n",
    "    print(\"⚠️ Warning: Possible Overfitting! The model performs significantly better on training data than on test data.\")\n",
    "\n",
    "# Underfitting Alert\n",
    "if train_accuracy < 0.70 and accuracy < 0.70:\n",
    "    print(\"⚠️ Warning: Possible Underfitting! Both training and test accuracy are low. Model may need more training or better feature extraction.\")\n",
    "\n",
    "# Underperformance Alert\n",
    "if accuracy - f1 > 0.10:\n",
    "    print(\"⚠️ Warning: Possible Underperformance! The model's accuracy is high, but F1-score is lower, indicating misclassification issues.\")\n",
    "\n",
    "print(\"--------------------------------\\n\")\n",
    "\n",
    "# Visualize the predictions\n",
    "image_height = X.shape[1]\n",
    "image_width = X.shape[2]\n",
    "\n",
    "plt.figure(figsize=(15, 5))\n",
    "for i in range(sample_size):\n",
    "    plt.subplot(4, 5, i + 1)  # 4 rows x 5 columns grid for visualization\n",
    "    plt.imshow(X_test_sampled[i].reshape(image_height, image_width), cmap='gray')  # Reshape dynamically\n",
    "    plt.title(f\"Actual: {label_encoder.inverse_transform([actual_labels[i]])[0]}\\nPred: {label_encoder.inverse_transform([predicted_labels[i]])[0]}\")\n",
    "    plt.axis('off')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9694c466",
   "metadata": {
    "papermill": {
     "duration": 0.023166,
     "end_time": "2025-02-19T17:33:39.548269",
     "exception": false,
     "start_time": "2025-02-19T17:33:39.525103",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Demonstration Methodology for Testing the Model Against Random Segments\n",
    "\n",
    "This cell illustrates how to evaluate the trained model on a randomly sampled subset of test segments and visually compare the model's predictions with the actual labels. Below is a detailed explanation of the demonstration process:\n",
    "\n",
    "1. **Random Sampling of Test Data:**  \n",
    "   - The code first randomly selects a subset of test examples from the flattened test dataset (`X_test_flat`) using Python’s `random.sample`.  \n",
    "   - The variable `sample_size` (set to 10) determines how many test samples are chosen for visualization.\n",
    "   - The corresponding one-hot encoded labels for these samples are extracted from `y_test`.\n",
    "\n",
    "2. **Model Predictions:**  \n",
    "   - The model’s `predict` method is applied to the sampled test data to obtain prediction probabilities.\n",
    "   - `np.argmax` is then used on both the predictions and the one-hot encoded test labels to convert them into discrete class indices.\n",
    "\n",
    "3. **Decoding Labels:**  \n",
    "   - The predicted class indices and actual class indices are converted back to their original label representations using the previously fitted `label_encoder.inverse_transform` method. This step makes the output human-readable (e.g., \"A\", \"B\", \"1\", etc.).\n",
    "\n",
    "4. **Visualization:**  \n",
    "   - The sampled test images are reshaped back to their original dimensions (using `image_height` and `image_width`) for display.\n",
    "   - A grid layout (4 rows by 5 columns) is used to plot the images, with each subplot showing:\n",
    "     - The test image.\n",
    "     - A title displaying the **Actual** label (from the ground truth) and the **Predicted** label (from the model).\n",
    "   - Axes are turned off for a cleaner look.\n",
    "   - Finally, `plt.tight_layout()` ensures the subplots are neatly arranged, and `plt.show()` renders the visualization.\n",
    "\n",
    "This demonstration methodology provides a clear, visual insight into the model's performance on unseen data, allowing us to quickly assess areas where the model performs well or may need further improvement.\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 6694926,
     "sourceId": 10788366,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30886,
   "isGpuEnabled": true,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 56.844628,
   "end_time": "2025-02-19T17:33:42.079905",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-19T17:32:45.235277",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
